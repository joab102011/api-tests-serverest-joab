{
  "info": {
    "name": "Automation API QAOps ServeRest",
    "_postman_id": "22222222-3333-4444-5555-666666666666",
    "description": "Coleção completa de testes automatizados (cenários positivos e negativos) da API ServeRest, garantindo cobertura total para CRUD de usuários.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Login com sucesso",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"fulano@qa.com\", \"password\": \"teste\"}"
            },
            "url": "{{base_url}}/login"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test('DADO email e senha válidos, QUANDO faço login, ENTÃO recebo JWT', () => {",
            "  pm.response.to.have.status(200);",
            "  pm.expect(pm.response.json()).to.have.property('authorization');",
            "  pm.environment.set('authToken', pm.response.json().authorization);",
            "  const jsonData = pm.response.json();",
            "  pm.expect(jsonData).to.have.property('message');",
            "  pm.expect(jsonData.message).to.include('Login realizado com sucesso');",
            "});"
          ]}}]
        },
        {
          "name": "[Negativo] Login com email inválido",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"emailinvalido@teste.com\", \"password\": \"teste\"}"
            },
            "url": "{{base_url}}/login"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test('QUANDO faço login com email inválido, ENTÃO retorna 400', () => {",
            "  pm.response.to.have.status(401);",
            "  const jsonData = pm.response.json();",
            "  pm.expect(jsonData).to.have.property('message');",
            "  pm.expect(jsonData.message).to.include('Email e/ou senha inválidos');",
            "});"
          ]}}]
        },
        {
          "name": "[Negativo] Login com senha inválida",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"fulano@qa.com\", \"password\": \"senhaerrada\"}"
            },
            "url": "{{base_url}}/login"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test('QUANDO faço login com senha incorreta, ENTÃO retorna 401', () => {",
            "  pm.response.to.have.status(401);",
            "  const jsonData = pm.response.json();",
            "  pm.expect(jsonData).to.have.property('message');",
            "  pm.expect(jsonData.message).to.include('Email e/ou senha inválidos');",
            "});"
          ]}}]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Listar usuários autenticado",
          "request": {
            "method": "GET",
            "header": [{"key": "Authorization", "value": "Bearer {{authToken}}"}],
            "url": "{{base_url}}/usuarios"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test('QUANDO solicito lista autenticado, ENTÃO retorna 200 com usuários', () => {",
            "  pm.response.to.have.status(200);",
            "  pm.expect(pm.response.json().usuarios).to.be.an('array');",
            "});"
          ]}}]
        },
        {
          "name": "[Negativo] Listar usuários sem autenticação",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/usuarios"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "const jsonData = pm.response.json();",
          "",
          "pm.test('QUANDO solicito lista autenticado, ENTÃO retorna 200 e um array de usuários', () => {",
          "  pm.response.to.have.status(200);",
          "  pm.expect(jsonData).to.be.an('object');",
          "  pm.expect(jsonData).to.have.property('usuarios');",
          "  pm.expect(jsonData.usuarios).to.be.an('array').that.is.not.empty;",
          "});",
          "",
          "pm.test('ENTÃO cada usuário possui os campos obrigatórios', () => {",
          "  const requiredFields = ['_id', 'nome', 'email', 'password', 'administrador'];",
          "  jsonData.usuarios.forEach(usuario => {",
          "    requiredFields.forEach(field => {",
          "      pm.expect(usuario).to.have.property(field).that.is.not.null;",
          "    });",
          "  });",
          "});",
          "",
          "pm.test('ENTÃO os campos possuem tipos de dados corretos', () => {",
          "  jsonData.usuarios.forEach(usuario => {",
          "    pm.expect(usuario._id).to.be.a('string');",
          "    pm.expect(usuario.nome).to.be.a('string');",
          "    pm.expect(usuario.email).to.be.a('string');",
          "    pm.expect(usuario.password).to.be.a('string');",
          "    pm.expect(usuario.administrador).to.be.a('string');",
          "  });",
          "});"
          ]}}]
        },
        {
          "name": "Criar usuário válido",
          "request": {
            "method": "POST",
            "header": [
              {"key": "Authorization", "value": "Bearer {{authToken}}"},
              {"key": "Content-Type", "value": "application/json"}
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"nome\": \"Usuário Teste\",\"email\": \"usuario_{{$randomInt}}@qa.com\",\"password\": \"senha123\",\"administrador\": \"true\"}"
            },
            "url": "{{base_url}}/usuarios"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test('QUANDO envio dados válidos, ENTÃO usuário criado', () => {",
            "  pm.response.to.have.status(201);",
            "  pm.environment.set('userId', pm.response.json()._id);",
            "  const jsonData = pm.response.json();",
            "  pm.expect(jsonData).to.have.property('message');",
            "  pm.expect(jsonData.message).to.include('Cadastro realizado com sucesso');",
            "});"
          ]}}]
        },
        {
          "name": "[Negativo] Criar usuário com email já existente",
          "request": {
            "method": "POST",
            "header": [
              {"key": "Authorization", "value": "Bearer {{authToken}}"},
              {"key": "Content-Type", "value": "application/json"}
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"nome\": \"Usuário Teste\",\"email\": \"fulano@qa.com\",\"password\": \"senha123\",\"administrador\": \"true\"}"
            },
            "url": "{{base_url}}/usuarios"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test('QUANDO envio email duplicado, ENTÃO retorna 400', () => {",
            "  pm.response.to.have.status(400);",
            "});"
          ]}}]
        },
        {
          "name": "Atualizar usuário existente",
          "request": {
            "method": "PUT",
            "header": [
              {"key": "Authorization", "value": "Bearer {{authToken}}"},
              {"key": "Content-Type", "value": "application/json"}
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"nome\": \"Usuário Atualizado\",\"email\": \"usuario_atualizado@qa.com\",\"password\": \"nova_senha\",\"administrador\": \"false\"}"
            },
            "url": "{{base_url}}/usuarios/{{userId}}"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test('QUANDO atualizo dados válidos, ENTÃO retorna 200', () => {",
            "  pm.response.to.have.status(200);",
            "  const jsonData = pm.response.json();",
            "  pm.expect(jsonData).to.have.property('message');",
            "  pm.expect(jsonData.message).to.include('Registro alterado com sucesso');",
            "});"
          ]}}]
        },
        {
          "name": "[Negativo] Atualizar usuário inexistente",
          "request": {
            "method": "PUT",
            "header": [
              {"key": "Authorization", "value": "Bearer {{authToken}}"},
              {"key": "Content-Type", "value": "application/json"}
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"nome\": \"Inexistente\",\"email\": \"inexistente@qa.com\",\"password\": \"123\",\"administrador\": \"false\"}"
            },
            "url": "{{base_url}}/usuarios/000000000000000000000000"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test('QUANDO atualizo usuário inexistente, ENTÃO retorna 400 e mensagem apropriada', () => {",
            "  pm.response.to.have.status(400);",
            "  const jsonData = pm.response.json();",
            "  pm.expect(jsonData).to.have.property('message');",
            "  pm.expect(jsonData.message).to.include('Este email já está sendo usado');",
            "});"
          ]}}]
        },
        {
          "name": "Excluir usuário existente",
          "request": {
            "method": "DELETE",
            "header": [{"key": "Authorization", "value": "Bearer {{authToken}}"}],
            "url": "{{base_url}}/usuarios/{{userId}}"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test('QUANDO excluo existente, ENTÃO retorna 200', () => {",
            "  pm.response.to.have.status(200);",
            "  const jsonData = pm.response.json();",
            "  pm.expect(jsonData).to.have.property('message');",
            "  pm.expect(jsonData.message).to.include('Registro excluído com sucesso');",
            "});"
          ]}}]
        },
        {
          "name": "[Negativo] Excluir usuário já excluído",
          "request": {
            "method": "DELETE",
            "header": [{"key": "Authorization", "value": "Bearer {{authToken}}"}],
            "url": "{{base_url}}/usuarios/{{userId}}"
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test('QUANDO excluo usuário inexistente, ENTÃO retorna 200 com mensagem informando que não foi encontrado', () => {",
            "  pm.response.to.have.status(200);",
            "  const jsonData = pm.response.json();",
            "  pm.expect(jsonData.message).to.eql('Nenhum registro excluído');",
            "});"
          ]}}]
        }
      ]
    }
  ]
}
